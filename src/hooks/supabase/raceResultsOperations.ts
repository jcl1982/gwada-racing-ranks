
import { supabase } from '@/integrations/supabase/client';
import { RaceResult } from '@/types/championship';
import { validateDriverIds, validateDriversExistence } from './raceValidation';

export const deleteExistingResults = async (raceId: string): Promise<void> => {
  const { error: deleteError } = await supabase
    .from('race_results')
    .delete()
    .eq('race_id', raceId);

  if (deleteError) {
    console.error('‚ùå Erreur lors de la suppression des anciens r√©sultats:', deleteError);
    throw deleteError;
  }
};

// Nouvelle fonction pour supprimer uniquement les r√©sultats d'une cat√©gorie sp√©cifique (pour karting)
export const deleteResultsByCategory = async (raceId: string, category: string): Promise<void> => {
  console.log(`üóëÔ∏è Suppression des r√©sultats pour la cat√©gorie "${category}" de la course ${raceId}`);
  
  const { error: deleteError } = await supabase
    .from('race_results')
    .delete()
    .eq('race_id', raceId)
    .eq('category', category);

  if (deleteError) {
    console.error('‚ùå Erreur lors de la suppression des r√©sultats par cat√©gorie:', deleteError);
    throw deleteError;
  }
  
  console.log(`‚úÖ R√©sultats de la cat√©gorie "${category}" supprim√©s`);
};

// Nouvelle fonction pour supprimer uniquement les r√©sultats d'un r√¥le sp√©cifique (pilote/copilote)
export const deleteResultsByDriverRole = async (raceId: string, driverRole: 'pilote' | 'copilote'): Promise<void> => {
  console.log(`üóëÔ∏è [DELETE_BY_ROLE] Suppression des r√©sultats des ${driverRole}s pour la course ${raceId}`);
  
  // R√©cup√©rer le championship_id de la course
  const { data: raceData, error: raceError } = await supabase
    .from('races')
    .select('championship_id')
    .eq('id', raceId)
    .single();

  if (raceError) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration du championship_id:', raceError);
    throw raceError;
  }

  const championshipId = raceData.championship_id;
  console.log(`üîç [DELETE_BY_ROLE] ChampionshipId de la course: ${championshipId}`);
  
  // R√©cup√©rer les IDs des drivers avec le r√¥le sp√©cifi√© ET du m√™me championnat
  const { data: driversWithRole, error: fetchError } = await supabase
    .from('drivers')
    .select('id, name')
    .eq('driver_role', driverRole)
    .eq('championship_id', championshipId);

  if (fetchError) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des drivers:', fetchError);
    throw fetchError;
  }

  if (!driversWithRole || driversWithRole.length === 0) {
    console.log(`‚ÑπÔ∏è [DELETE_BY_ROLE] Aucun ${driverRole} trouv√© dans ce championnat, rien √† supprimer`);
    return;
  }

  console.log(`üîç [DELETE_BY_ROLE] ${driversWithRole.length} ${driverRole}s trouv√©s:`, driversWithRole.map(d => d.name));

  const driverIds = driversWithRole.map(d => d.id);
  
  const { error: deleteError } = await supabase
    .from('race_results')
    .delete()
    .eq('race_id', raceId)
    .in('driver_id', driverIds);

  if (deleteError) {
    console.error(`‚ùå Erreur lors de la suppression des r√©sultats des ${driverRole}s:`, deleteError);
    throw deleteError;
  }
  
  console.log(`‚úÖ [DELETE_BY_ROLE] R√©sultats des ${driverRole}s supprim√©s avec succ√®s`);
};

export const saveRaceResults = async (raceId: string, results: RaceResult[]): Promise<void> => {
  console.log('üìä [SAVE_RESULTS] D√©but saveRaceResults - RaceId:', raceId);
  console.log('üìä [SAVE_RESULTS] Nombre de r√©sultats re√ßus:', results.length);
  
  if (results.length === 0) {
    console.warn('‚ö†Ô∏è [SAVE_RESULTS] AUCUN R√âSULTAT √Ä SAUVEGARDER !');
    return;
  }

  console.log('üìä [SAVE_RESULTS] Sauvegarde de', results.length, 'r√©sultats');
  console.log('üìä [SAVE_RESULTS] Tous les r√©sultats:', results.map(r => ({
    driverId: r.driverId.slice(0, 8) + '...',
    position: r.position,
    points: r.points,
    carModel: r.carModel
  })));
  
  // Validate all driver IDs before inserting
  validateDriverIds(results);

  // Verify all drivers exist in database
  const driverIds = results.map(r => r.driverId);
  
  // R√©cup√©rer le championshipId de la course pour valider les pilotes dans le bon championnat
  const { data: raceData, error: raceError } = await supabase
    .from('races')
    .select('championship_id')
    .eq('id', raceId)
    .single();
  
  if (raceError) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration du championship_id de la course:', raceError);
  }
  
  await validateDriversExistence(driverIds, raceData?.championship_id);

  // R√©cup√©rer les informations compl√®tes des pilotes/copilotes
  const { data: driversData, error: driversError } = await supabase
    .from('drivers')
    .select('id, car_model, driver_role, name')
    .in('id', driverIds);

  if (driversError) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des infos des pilotes:', driversError);
    throw driversError;
  }

  console.log('üìä [SAVE_RESULTS] Pilotes/Copilotes r√©cup√©r√©s:', driversData?.map(d => ({
    name: d.name,
    role: d.driver_role,
    carModel: d.car_model
  })));

  // Cr√©er une map pour acc√©der facilement aux car_model
  const carModelMap = new Map(driversData?.map(d => [d.id, d.car_model]) || []);

  // Insert results in batch for efficiency
  const resultsToInsert = results.map(result => ({
    race_id: raceId,
    driver_id: result.driverId,
    position: result.position,
    points: result.points,
    time: result.time,
    dnf: result.dnf || false,
    // Utiliser le car_model du r√©sultat s'il existe, sinon celui du pilote
    car_model: result.carModel || carModelMap.get(result.driverId) || null,
    category: result.category || null,
    bonus: result.bonus || 0
  }));

  console.log('üìä [SAVE_RESULTS] Donn√©es √† ins√©rer (premier √©l√©ment):', resultsToInsert[0]);
  console.log('üìä [SAVE_RESULTS] Insertion dans race_results...');

  const { error: resultError } = await supabase
    .from('race_results')
    .insert(resultsToInsert);

  if (resultError) {
    console.error('‚ùå Erreur lors de la sauvegarde des r√©sultats:', resultError);
    throw resultError;
  }

  console.log('‚úÖ Tous les r√©sultats ont √©t√© sauvegard√©s avec succ√®s');
};
