
import { Driver, Race } from '@/types/championship';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { convertSupabaseDriver } from '@/hooks/supabase/converters';
import { createMissingDrivers } from './importDrivers';
import { processRaces } from './importRaces';
import { validateImportData, findMissingDrivers, logImportSummary } from './importValidation';
import { generateSuccessMessage, generateErrorMessage, performFinalRefresh } from './importUtils';

export const useChampionshipImport = (
  saveDriver: (driver: Driver) => Promise<string>,
  saveRace: (race: Omit<Race, 'id' | 'results'> | Race) => Promise<void>,
  refreshData: () => Promise<void>,
  autoSaveStandings: () => Promise<void>
) => {
  const { toast } = useToast();

  const handleImport = async (newRaces: Race[], newDrivers: Driver[]) => {
    try {
      // Validation initiale
      validateImportData(newRaces, newDrivers);
      
      // D√©tecter le championshipId depuis les courses √† importer
      const targetChampionshipId = newRaces[0]?.championshipId;
      if (!targetChampionshipId) {
        throw new Error('Aucun championshipId trouv√© dans les courses √† importer');
      }
      
      console.log('üéØ [IMPORT] ChampionshipId cible:', targetChampionshipId);
      
      // Charger TOUS les drivers de ce championnat pour le mapping
      console.log('üë• [IMPORT] Chargement des drivers du championnat cible...');
      const { data: targetDriversData, error: driversError } = await supabase
        .from('drivers')
        .select('*')
        .eq('championship_id', targetChampionshipId)
        .order('name');
      
      if (driversError) {
        console.error('‚ùå [IMPORT] Erreur lors du chargement des drivers:', driversError);
        throw driversError;
      }
      
      const targetChampionshipDrivers: Driver[] = targetDriversData?.map(convertSupabaseDriver) || [];
      console.log('‚úÖ [IMPORT] Drivers du championnat cible charg√©s:', targetChampionshipDrivers.length);
      console.log('üë• [IMPORT] R√©partition:', {
        pilotes: targetChampionshipDrivers.filter(d => d.driverRole === 'pilote').length,
        copilotes: targetChampionshipDrivers.filter(d => d.driverRole === 'copilote').length
      });
      
      // Sauvegarder AVANT l'import pour pr√©server les √©volutions
      console.log('üíæ [IMPORT] Sauvegarde du classement avant import...');
      try {
        await autoSaveStandings();
        console.log('‚úÖ [IMPORT] Positions sauvegard√©es avant import');
      } catch (error) {
        console.error('‚ùå [IMPORT] Erreur lors de la sauvegarde avant import:', error);
      }
      
      // √âtape 1: Cr√©er une map compl√®te TEMP_ID ‚Üí REAL_ID pour TOUS les pilotes
      console.log('üó∫Ô∏è [IMPORT] Construction de la map compl√®te des IDs...');
      console.log(`üó∫Ô∏è [IMPORT] Pilotes dans newDrivers: ${newDrivers.length}`);
      console.log(`üó∫Ô∏è [IMPORT] Pilotes dans targetChampionshipDrivers (existants): ${targetChampionshipDrivers.length}`);
      
      // Afficher les noms des pilotes pour debug
      console.log('üó∫Ô∏è [IMPORT] Liste des newDrivers:', newDrivers.map(d => `"${d.name}" (${d.driverRole})`));
      console.log('üó∫Ô∏è [IMPORT] Liste des targetChampionshipDrivers:', targetChampionshipDrivers.map(d => `"${d.name}" (${d.driverRole})`));
      
      const completeIdMap = new Map<string, string>();
      
      // D'abord, mapper les pilotes existants (leurs IDs temporaires du Excel ‚Üí IDs r√©els de la DB)
      console.log('üó∫Ô∏è [IMPORT] === Mapping des pilotes existants ===');
      newDrivers.forEach((newDriver, index) => {
        console.log(`üîç [IMPORT] Recherche pilote ${index + 1}/${newDrivers.length}: "${newDriver.name}" (R√¥le: ${newDriver.driverRole}, ChampID: ${newDriver.championshipId?.slice(0, 8)}..., TempID: ${newDriver.id.slice(0, 8)}...)`);
        
        const existingDriver = targetChampionshipDrivers.find(d => {
          const normalizedNewName = newDriver.name.trim().toLowerCase()
            .replace(/\s+/g, ' ')
            .normalize("NFD").replace(/[\u0300-\u036f]/g, "");
          const normalizedExistingName = d.name.trim().toLowerCase()
            .replace(/\s+/g, ' ')
            .normalize("NFD").replace(/[\u0300-\u036f]/g, "");
          
          const nameMatch = normalizedNewName === normalizedExistingName;
          const championshipMatch = d.championshipId === newDriver.championshipId;
          const roleMatch = d.driverRole === newDriver.driverRole;
          
          if (normalizedNewName === normalizedExistingName) {
            console.log(`  üîé Candidat: "${d.name}" (R√¥le: ${d.driverRole}, ChampID: ${d.championshipId?.slice(0, 8)}...) - NameMatch: ${nameMatch}, ChampMatch: ${championshipMatch}, RoleMatch: ${roleMatch}`);
          }
          
          return nameMatch && championshipMatch && roleMatch;
        });
        
        if (existingDriver) {
          console.log(`  ‚úÖ [IMPORT] Pilote existant mapp√©: "${newDriver.name}" (${newDriver.driverRole}) - Temp ID: ${newDriver.id.slice(0, 8)}... ‚Üí Real ID: ${existingDriver.id.slice(0, 8)}...`);
          completeIdMap.set(newDriver.id, existingDriver.id);
        } else {
          console.log(`  ‚ö†Ô∏è [IMPORT] Pilote NON trouv√© dans les existants (sera cr√©√©): "${newDriver.name}" (${newDriver.driverRole})`);
        }
      });
      
      console.log(`üó∫Ô∏è [IMPORT] R√©sultat du premier mapping: ${completeIdMap.size} correspondances trouv√©es`);
      
      // √âtape 2: Cr√©er tous les pilotes manquants
      const missingDrivers = findMissingDrivers(newDrivers, targetChampionshipDrivers);
      const { totalCreated, totalErrors, idMap } = await createMissingDrivers(
        missingDrivers,
        saveDriver,
        refreshData,
        toast
      );
      
      // Ajouter les nouveaux pilotes cr√©√©s √† la map compl√®te
      idMap.forEach((realId, tempId) => {
        console.log(`  ‚ûï Nouveau pilote mapp√©: Temp ID: ${tempId.slice(0, 8)}... ‚Üí Real ID: ${realId.slice(0, 8)}...`);
        completeIdMap.set(tempId, realId);
      });
      
      console.log(`üó∫Ô∏è [IMPORT] Map compl√®te: ${completeIdMap.size} correspondances totales`);

      // √âtape 3: Mettre √† jour TOUS les IDs des pilotes dans les r√©sultats de course
      console.log('üîÑ [IMPORT] Mise √† jour des IDs des pilotes dans les r√©sultats de course...');
      let updatedCount = 0;
      let notFoundCount = 0;
      
      newRaces.forEach((race, raceIndex) => {
        race.results.forEach((result, resultIndex) => {
          const realId = completeIdMap.get(result.driverId);
          if (realId) {
            console.log(`  ‚úÖ Course "${race.name}", R√©sultat #${resultIndex + 1}: ${result.driverId.slice(0, 8)}... ‚Üí ${realId.slice(0, 8)}...`);
            result.driverId = realId;
            updatedCount++;
          } else {
            console.error(`  ‚ùå ERREUR: ID introuvable pour le r√©sultat #${resultIndex + 1} de "${race.name}" - ID: ${result.driverId.slice(0, 8)}...`);
            notFoundCount++;
          }
        });
      });
      
      console.log(`‚úÖ [IMPORT] ${updatedCount} r√©f√©rences de pilotes mises √† jour dans les courses`);
      if (notFoundCount > 0) {
        console.error(`‚ùå [IMPORT] ${notFoundCount} r√©f√©rences de pilotes NON TROUV√âES!`);
      }

      // √âtape 4: Traiter les courses
      const { successCount, errorCount } = await processRaces(
        newRaces,
        saveRace,
        refreshData,
        toast
      );

      // Rafra√Æchissement final complet - ATTEND la fin avant de continuer
      await performFinalRefresh(refreshData);

      // Log du r√©sum√©
      logImportSummary(successCount, errorCount, totalCreated);
      
      // Affichage du toast de r√©sultat
      const message = generateSuccessMessage(successCount, errorCount, totalCreated);
      toast(message);
      
      console.log('‚úÖ Import Excel termin√© et donn√©es synchronis√©es');
      
    } catch (error) {
      console.error('üí• Erreur critique lors de l\'import:', error);
      
      // Toujours rafra√Æchir les donn√©es m√™me en cas d'erreur
      console.log('üîÑ Rafra√Æchissement des classements apr√®s erreur...');
      await refreshData();
      
      const errorMessage = generateErrorMessage(error);
      toast(errorMessage);
    }
  };

  return { handleImport };
};
